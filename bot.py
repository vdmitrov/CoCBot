import logging
import aiohttp
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")

# –¢–æ–∫–µ–Ω—ã (–∑–∞–º–µ–Ω–∏ –Ω–∞ –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ)
TELEGRAM_BOT_TOKEN = "7930052685:AAHh_3Cl86M3p6u70BThTCbE6rDQKOiDt8s"
COC_API_TOKEN = "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzUxMiIsImtpZCI6IjI4YTMxOGY3LTAwMDAtYTFlYi03ZmExLTJjNzQzM2M2Y2NhNSJ9.eyJpc3MiOiJzdXBlcmNlbGwiLCJhdWQiOiJzdXBlcmNlbGw6Z2FtZWFwaSIsImp0aSI6ImIyMjA5MWQ2LTQyYjAtNDFhNC05NWFmLTc5MzA1MWU4MjQwMyIsImlhdCI6MTczOTY5ODc5MCwic3ViIjoiZGV2ZWxvcGVyLzQ2YTUwN2JhLTNjMDItZDZjNy1hMTM1LTA2MTA5YzEyZDE2MCIsInNjb3BlcyI6WyJjbGFzaCJdLCJsaW1pdHMiOlt7InRpZXIiOiJkZXZlbG9wZXIvc2lsdmVyIiwidHlwZSI6InRocm90dGxpbmcifSx7ImNpZHJzIjpbIjM0LjIxMS4yMDAuODUiXSwidHlwZSI6ImNsaWVudCJ9XX0.hPFKBC12JmzptbC7I984hLGv9H2LSBSSXYs15wdSHOAiW4dvKVly1HeNRLzbsJ2KotXoFDMlAomOaunUrVyRUw"
CLAN_TAG = "#2GCG2C0YP"

# –°–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=TELEGRAM_BOT_TOKEN)
dp = Dispatcher()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–ª–∞–Ω–µ
async def get_clan_data():
    url = f"https://api.clashofclans.com/v1/clans/{CLAN_TAG.replace('#', '%23')}"
    headers = {"Authorization": f"Bearer {COC_API_TOKEN}"}

    async with aiohttp.ClientSession() as session:
        try:
            async with session.get(url, headers=headers) as response:
                logging.info(f"–ó–∞–ø—Ä–æ—Å –∫ API: {url}, –°—Ç–∞—Ç—É—Å-–∫–æ–¥: {response.status}")

                if response.status == 200:
                    data = await response.json()
                    return data
                else:
                    error_text = await response.text()
                    logging.error(f"–û—à–∏–±–∫–∞ API: {response.status} - {error_text}")
                    return None
        except Exception as e:
            logging.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ API")
            return None

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(Command("start"))
async def send_welcome(message: types.Message):
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞")
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –ò—Å–ø–æ–ª—å–∑—É–π /info, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª–∞–Ω–µ.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /info
@dp.message(Command("info"))
async def send_clan_info(message: types.Message):
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª /info")

    data = await get_clan_data()
    if not data:
        await message.answer("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –∫–ª–∞–Ω–µ üò¢")
        return

    clan_name = data.get("name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
    members = data.get("memberList", [])

    player_list = []
    for player in members:
        name = player.get("name", "–ë–µ–∑ –∏–º–µ–Ω–∏")
        role = player.get("role", "member")
        level = player.get("expLevel", "?")
        townhall = player.get("townHallLevel", "?")
        trophies = player.get("trophies", "?")

        role_emoji = {
            "leader": "üëë",
            "coLeader": "‚≠ê",
            "elder": "üõ°",
            "member": "üîπ"
        }.get(role, "‚ùì")

        player_list.append(f"{role_emoji} {name} (‚≠ê {level}, üè† {townhall}, üèÜ {trophies})")

    text = f"üè∞ **–ö–ª–∞–Ω {clan_name}**\nüë• –£—á–∞—Å—Ç–Ω–∏–∫–∏: {len(members)}\n\n" + "\n".join(player_list)
    await message.answer(text, parse_mode="Markdown")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –æ–∂–∏–¥–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã")
    await bot.delete_webhook(drop_pending_updates=True)  # –ß–∏—Å—Ç–∫–∞ –æ—á–µ—Ä–µ–¥–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
